<mxfile host="65bd71144e">
    <diagram id="S-SmY_C4Q0C6iPyg7M23" name="Page-1">
        <mxGraphModel dx="482" dy="1461" grid="1" gridSize="10" guides="1" tooltips="1" connect="1" arrows="1" fold="1" page="1" pageScale="1" pageWidth="827" pageHeight="1169" math="0" shadow="0">
            <root>
                <mxCell id="0"/>
                <mxCell id="1" parent="0"/>
                <mxCell id="2" value="&lt;b&gt;CRUD&lt;/b&gt;" style="text;html=1;align=center;verticalAlign=middle;resizable=0;points=[];autosize=1;strokeColor=none;fillColor=none;" vertex="1" parent="1">
                    <mxGeometry x="215" y="150" width="60" height="30" as="geometry"/>
                </mxCell>
                <mxCell id="3" value="create&lt;br&gt;" style="text;html=1;align=center;verticalAlign=middle;resizable=0;points=[];autosize=1;strokeColor=none;fillColor=none;" vertex="1" parent="1">
                    <mxGeometry x="145" y="180" width="60" height="30" as="geometry"/>
                </mxCell>
                <mxCell id="4" value="courses" style="text;html=1;align=center;verticalAlign=middle;resizable=0;points=[];autosize=1;strokeColor=none;fillColor=none;" vertex="1" parent="1">
                    <mxGeometry x="205" y="110" width="70" height="30" as="geometry"/>
                </mxCell>
                <mxCell id="5" value="Read" style="text;html=1;align=center;verticalAlign=middle;resizable=0;points=[];autosize=1;strokeColor=none;fillColor=none;" vertex="1" parent="1">
                    <mxGeometry x="190" y="180" width="50" height="30" as="geometry"/>
                </mxCell>
                <mxCell id="6" value="update" style="text;html=1;align=center;verticalAlign=middle;resizable=0;points=[];autosize=1;strokeColor=none;fillColor=none;" vertex="1" parent="1">
                    <mxGeometry x="230" y="180" width="60" height="30" as="geometry"/>
                </mxCell>
                <mxCell id="7" value="Delete" style="text;html=1;align=center;verticalAlign=middle;resizable=0;points=[];autosize=1;strokeColor=none;fillColor=none;" vertex="1" parent="1">
                    <mxGeometry x="275" y="180" width="60" height="30" as="geometry"/>
                </mxCell>
                <mxCell id="8" value="DB--&amp;gt;ahmed sami" style="text;html=1;align=center;verticalAlign=middle;resizable=0;points=[];autosize=1;strokeColor=none;fillColor=none;" vertex="1" parent="1">
                    <mxGeometry x="300" y="85" width="120" height="30" as="geometry"/>
                </mxCell>
                <mxCell id="9" value="&lt;meta charset=&quot;utf-8&quot;&gt;GET, POST, PUT, DELETE" style="text;whiteSpace=wrap;html=1;" vertex="1" parent="1">
                    <mxGeometry x="155" y="220" width="195" height="40" as="geometry"/>
                </mxCell>
                <mxCell id="10" value="MVC" style="text;html=1;align=center;verticalAlign=middle;resizable=0;points=[];autosize=1;strokeColor=none;fillColor=none;" vertex="1" parent="1">
                    <mxGeometry x="385" y="165" width="50" height="30" as="geometry"/>
                </mxCell>
                <mxCell id="11" value="nodejs---&amp;gt;express" style="text;html=1;align=center;verticalAlign=middle;resizable=0;points=[];autosize=1;strokeColor=none;fillColor=none;" vertex="1" parent="1">
                    <mxGeometry x="220" y="295" width="120" height="30" as="geometry"/>
                </mxCell>
                <mxCell id="12" value="http://127.0.0.1:3030/api/courses" style="text;html=1;align=center;verticalAlign=middle;resizable=0;points=[];autosize=1;strokeColor=none;fillColor=none;" vertex="1" parent="1">
                    <mxGeometry x="20" y="280" width="200" height="30" as="geometry"/>
                </mxCell>
                <mxCell id="14" value="&lt;meta charset=&quot;utf-8&quot;&gt;&lt;p&gt;Node.js is a powerful, event-driven JavaScript runtime that is used for building scalable network applications. It uses an asynchronous, non-blocking I/O model, which makes it efficient and suitable for data-intensive real-time applications that run across distributed devices. Here are some key features and concepts related to Node.js:&lt;/p&gt;&lt;h3&gt;Key Features of Node.js:&lt;/h3&gt;&lt;ol&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;Event-Driven Architecture&lt;/strong&gt;:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Node.js uses an event-driven architecture where the flow of the program is determined by events such as user actions, sensor outputs, or messages from other programs.&lt;/li&gt;&lt;li&gt;The &lt;code&gt;EventEmitter&lt;/code&gt; class is a core feature in Node.js that facilitates the creation and handling of custom events.&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;Asynchronous I/O&lt;/strong&gt;:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Node.js performs I/O operations asynchronously, which means that operations such as reading files, making network requests, or accessing databases do not block the execution of the code.&lt;/li&gt;&lt;li&gt;This allows Node.js to handle many operations simultaneously, improving performance and efficiency.&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;Non-Blocking I/O&lt;/strong&gt;:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;In contrast to traditional blocking I/O operations, Node.js uses non-blocking I/O, allowing the execution of other operations while waiting for I/O tasks to complete.&lt;/li&gt;&lt;li&gt;This approach is well-suited for applications that require high concurrency, such as web servers or real-time chat applications.&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;Single-Threaded but Scalable&lt;/strong&gt;:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Node.js operates on a single thread using event loops, but it can handle many connections concurrently.&lt;/li&gt;&lt;li&gt;The &lt;code&gt;cluster&lt;/code&gt; module allows Node.js to create child processes (worker threads) to leverage multi-core systems and distribute workloads.&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ol&gt;&lt;h3&gt;Common Use Cases:&lt;/h3&gt;&lt;ol&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;Web Servers&lt;/strong&gt;:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Node.js is commonly used to build web servers that can handle multiple client requests efficiently.&lt;/li&gt;&lt;li&gt;Frameworks like Express.js simplify the creation of robust and scalable web applications.&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;Real-Time Applications&lt;/strong&gt;:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Applications that require real-time updates, such as chat applications, online gaming, and collaborative tools, benefit from Node.js's event-driven and non-blocking nature.&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;API Development&lt;/strong&gt;:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Node.js is frequently used for building RESTful APIs that can serve as the backend for web and mobile applications.&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;Microservices&lt;/strong&gt;:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Due to its lightweight and modular nature, Node.js is suitable for building microservices architectures, where individual services handle specific tasks and communicate with each other.&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ol&gt;&lt;h3&gt;Popular Node.js Modules:&lt;/h3&gt;&lt;ol&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;Express.js&lt;/strong&gt;:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;A minimalist web framework for Node.js that simplifies routing, middleware management, and server-side rendering.&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;Socket.io&lt;/strong&gt;:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;A library for real-time web applications that enables bidirectional communication between web clients and servers.&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;Mongoose&lt;/strong&gt;:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;An Object Data Modeling (ODM) library for MongoDB, which provides a schema-based solution to model application data.&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;Passport&lt;/strong&gt;:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;A middleware for authentication in Node.js applications, supporting various strategies such as OAuth, JWT, and local authentication.&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ol&gt;&lt;h3&gt;Example: Creating a Simple Web Server with Express.js&lt;/h3&gt;&lt;p&gt;Here's a basic example of creating a web server using Express.js:&lt;/p&gt;&lt;pre&gt;&lt;div class=&quot;dark bg-gray-950 rounded-md border-[0.5px] border-token-border-medium&quot;&gt;&lt;div class=&quot;flex items-center relative text-token-text-secondary bg-token-main-surface-secondary px-4 py-2 text-xs font-sans justify-between rounded-t-md&quot;&gt;&lt;span&gt;javascript&lt;/span&gt;&lt;div class=&quot;flex items-center&quot;&gt;&lt;span data-state=&quot;closed&quot; class=&quot;&quot;&gt;&lt;button class=&quot;flex gap-1 items-center&quot;&gt;&lt;/button&gt;&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/pre&gt;" style="text;whiteSpace=wrap;html=1;" vertex="1" parent="1">
                    <mxGeometry x="110" y="400" width="560" height="1520" as="geometry"/>
                </mxCell>
                <mxCell id="15" value="sync.&amp;nbsp; &amp;nbsp;asynch" style="text;html=1;align=center;verticalAlign=middle;resizable=0;points=[];autosize=1;strokeColor=none;fillColor=none;" vertex="1" parent="1">
                    <mxGeometry x="300" y="265" width="100" height="30" as="geometry"/>
                </mxCell>
                <mxCell id="17" value="// Synchronous code&lt;br&gt;&lt;br&gt;&lt;br&gt;function readFileSync() {&lt;br&gt;&lt;br&gt;&amp;nbsp; const fs = require('fs');&lt;br&gt;&lt;br&gt;&lt;br&gt;&amp;nbsp; const data = fs.readFileSync('example.txt', 'utf8');&lt;br&gt;&lt;br&gt;&amp;nbsp; console.log(data);&lt;br&gt;&lt;br&gt;&amp;nbsp; console.log('File read completed');&lt;br&gt;}&lt;br&gt;&lt;br&gt;&lt;br&gt;readFileSync();&lt;br&gt;&lt;br&gt;console.log('This will run after the file is read');" style="text;whiteSpace=wrap;html=1;" vertex="1" parent="1">
                    <mxGeometry x="25" y="-260" width="300" height="230" as="geometry"/>
                </mxCell>
                <mxCell id="25" value="// Asynchronous code using callbacks&lt;br&gt;function readFileAsync() {&lt;br&gt;&amp;nbsp; const fs = require('fs');&lt;br&gt;&amp;nbsp; fs.readFiles('example.txt', 'utf8', (err, data) =&amp;gt; {&lt;br&gt;&amp;nbsp; &amp;nbsp; if (err) throw err;&lt;br&gt;&amp;nbsp; &amp;nbsp; console.log(data);&lt;br&gt;&amp;nbsp; &amp;nbsp; console.log('File read completed');&lt;br&gt;&amp;nbsp; });&lt;br&gt;}&lt;br&gt;&lt;br&gt;&lt;br&gt;readFileAsync();&lt;br&gt;console.log('This will run immediately, not waiting for the file to be read');" style="text;whiteSpace=wrap;html=1;" vertex="1" parent="1">
                    <mxGeometry x="310" y="-210" width="330" height="210" as="geometry"/>
                </mxCell>
                <mxCell id="26" value="&lt;span style=&quot;color: rgb(240, 240, 240); font-family: Helvetica; font-size: 12px; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: 400; letter-spacing: normal; orphans: 2; text-align: left; text-indent: 0px; text-transform: none; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(42, 37, 47); text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial; float: none; display: inline !important;&quot;&gt;const fs = require('fs');&lt;br&gt;console.log('This will run immediately, not waiting for the file to be read');&lt;br&gt;&lt;/span&gt;" style="rounded=1;whiteSpace=wrap;html=1;" vertex="1" parent="1">
                    <mxGeometry x="294" y="-470" width="120" height="190" as="geometry"/>
                </mxCell>
                <mxCell id="27" value="&lt;span style=&quot;text-align: left;&quot;&gt;fs.readFiles('example.txt', 'utf8', (err, data) =&amp;gt; {&lt;/span&gt;&lt;br style=&quot;text-align: left;&quot;&gt;&lt;span style=&quot;text-align: left;&quot;&gt;&amp;nbsp; &amp;nbsp; if (err) throw err;&lt;/span&gt;&lt;br style=&quot;text-align: left;&quot;&gt;&lt;span style=&quot;text-align: left;&quot;&gt;&amp;nbsp; &amp;nbsp; console.log(data);&lt;/span&gt;&lt;br style=&quot;text-align: left;&quot;&gt;&lt;span style=&quot;text-align: left;&quot;&gt;&amp;nbsp; &amp;nbsp; console.log('File read completed');&lt;/span&gt;&lt;br style=&quot;text-align: left;&quot;&gt;&lt;span style=&quot;text-align: left;&quot;&gt;&amp;nbsp; });&lt;/span&gt;" style="rounded=1;whiteSpace=wrap;html=1;" vertex="1" parent="1">
                    <mxGeometry x="440" y="-470" width="190" height="150" as="geometry"/>
                </mxCell>
                <mxCell id="28" value="" style="rounded=1;whiteSpace=wrap;html=1;" vertex="1" parent="1">
                    <mxGeometry x="670" y="-500" width="120" height="150" as="geometry"/>
                </mxCell>
                <mxCell id="30" value="// A function that takes a callback function as an argument&#10;function doSomething(callback) {&#10;  console.log('Doing something...');&#10;  // Simulate some work with setTimeout&#10;  setTimeout(() =&gt; {&#10;    console.log('Done!');&#10;    // Call the callback function&#10;    callback();&#10;  }, 1000);&#10;}&#10;&#10;&#10;// A callback function&#10;function onCompletion() {&#10;  console.log('Callback function executed!');&#10;}&#10;&#10;&#10;// Execute doSomething with onCompletion as the callback&#10;doSomething(onCompletion);" style="text;whiteSpace=wrap;html=1;" vertex="1" parent="1">
                    <mxGeometry x="660" y="-240" width="350" height="310" as="geometry"/>
                </mxCell>
                <mxCell id="31" value="&lt;pre style=&quot;box-sizing: inherit; margin: 3.2rem 2.4rem; padding: 3.2rem; border: var(--artdeco-reset-base-border-zero); font-size: 16px; vertical-align: var(--artdeco-reset-base-vertical-align-baseline); background: var(--color-background-container-dark-tint); font-family: var(--artdeco-typography-mono); border-radius: var(--corner-radius-medium); overflow-x: auto; color: var(--color-text-on-dark); line-height: var(--line-height-open); display: block; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: 400; letter-spacing: normal; orphans: 2; text-align: start; text-indent: 0px; text-transform: none; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial;&quot; class=&quot;reader-content-blocks__code-block&quot;&gt;                    4) setTimeout(myCallback, 5000);--&amp;gt;async&lt;br&gt;1)console.log('Hello World!');&lt;br&gt;2)const data = fs.readFileSync(path.resolve(__dirname, './input.text'),{encoding:'utf8'});&lt;br&gt;3)console.log(data);&lt;/pre&gt;" style="text;whiteSpace=wrap;html=1;" vertex="1" parent="1">
                    <mxGeometry x="370" y="-690" width="560" height="310" as="geometry"/>
                </mxCell>
            </root>
        </mxGraphModel>
    </diagram>
</mxfile>